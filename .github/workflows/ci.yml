---
name: CI
on:
  push:
    branches:
      - main
      - release/*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

jobs:
  test:
    name: Test
    timeout-minutes: 30

    strategy:
      matrix:
        # FIXME remove macos-latest: https://jira.percona.com/browse/PMM-6166
        os: [ubuntu-latest, macos-latest]
        go-version: [1.14.x]
        kubernetes_version: [1.16.8]  # TODO add other versions
        build_tags: ['', 'saas']

    runs-on: ${{ matrix.os }}

    env:
      # no `-mod=readonly` to test PRs made by @dependabot;
      # `git diff --exit-code` step below still checks what we need
      GOFLAGS: -v -tags='${{ matrix.build_tags }}'
      KUBERNETES_VERSION: ${{ matrix.kubernetes_version }}
      MINIKUBE_IN_STYLE: 1

    steps:
      - name: Configure git for private modules
        env:
          ROBOT_TOKEN: ${{ secrets.ROBOT_TOKEN }}
        run: git config --global url."https://percona-platform-robot:${ROBOT_TOKEN}@github.com".insteadOf "https://github.com"

      - name: Set up Go ${{ matrix.go-version }}
        uses: percona-platform/setup-go@v2.0.3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v2.3.1

      - name: Configure minikube on Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest'}}
        run: echo TODO

      - name: Configure minikube on macOS
        if: ${{ matrix.os == 'macos-latest'}}
        run: |
          brew install minikube
          minikube config set driver virtualbox

      # https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#supported-runners-and-hardware-resources
      - name: Apply common minikube configuration
        run: |
          minikube config set cpus 2
          minikube config set memory 4096

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-

      - name: Enable Go build cache
        uses: percona-platform/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-

      - name: Download Go modules
        run: go mod download

      - name: Install tools
        run: make init

      - name: Generate code
        run: make gen

      - name: Install binaries
        run: make install

      - name: Start development environment
        run: make env-up

      - name: Run tests
        run: |
          go clean -testcache
          make test

      - name: Collect debugdata
        if: ${{ always() }}
        run: make collect-debugdata

      - name: Upload debugdata
        if: ${{ always() }}
        uses: percona-platform/upload-artifact@v2
        with:
          name: debugdata
          path: ./debugdata

      - name: Setup tmate session on failure
        if: ${{ failure() }}
        uses: percona-platform/action-tmate@v2

      - name: Check that there are no source code changes
        run: |
          # Break job if any files were changed during its run (code generation, etc), except go.sum.
          # `go mod tidy` could remove old checksums from that file, and that's okay on CI,
          # and actually expected for PRs made by @dependabot.
          # Checksums of actually used modules are checked by previous `go` subcommands.
          pushd tools && go mod tidy && git checkout go.sum
          popd        && go mod tidy && git checkout go.sum
          git diff --exit-code

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go env
          pwd
          git status

  check:
    name: Check
    timeout-minutes: 5
    if: github.event_name == 'pull_request'

    strategy:
      matrix:
        go-version: [1.14.x]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    env:
      # no `-mod=readonly` to test PRs made by @dependabot;
      # `git diff --exit-code` step below still checks what we need
      GOFLAGS: -v

    steps:
      - name: Configure git for private modules
        env:
          ROBOT_TOKEN: ${{ secrets.ROBOT_TOKEN }}
        run: git config --global url."https://percona-platform-robot:${ROBOT_TOKEN}@github.com".insteadOf "https://github.com"

      - name: Set up Go ${{ matrix.go-version }}
        uses: percona-platform/setup-go@v2.0.3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v2.3.1

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-

      - name: Enable Go build cache
        uses: percona-platform/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-

      - name: Download Go modules
        run: go mod download

      - name: Install tools
        run: make init

      - name: Run checks/linters
        run: |
          bin/check-license

          # use GITHUB_TOKEN because only it has access to GitHub Checks API
          bin/golangci-lint run -c=.golangci-required.yml --out-format=line-number | env REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }} bin/reviewdog -f=golangci-lint -name='Required checks' -reporter=github-pr-check

          # use ROBOT_TOKEN for better reviewer's name
          bin/golangci-lint run --out-format=line-number | env REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.ROBOT_TOKEN }} bin/reviewdog -f=golangci-lint -name='Linters' -reporter=github-pr-review

          # run it like that until some of those issues/PRs are resolved:
          # * https://github.com/quasilyte/go-consistent/issues/33
          # * https://github.com/golangci/golangci-lint/issues/288
          # * https://github.com/reviewdog/errorformat/pull/47 (once it is atually used by reviewdog)
          bin/go-consistent -pedantic ./...

      - name: Check that there are no source code changes
        run: |
          # Break job if any files were changed during its run (tools installation, etc), except go.sum.
          # `go mod tidy` could remove old checksums from that file, and that's okay on CI,
          # and actually expected for PRs made by @dependabot.
          # Checksums of actually used modules are checked by previous `go` subcommands.
          pushd tools && go mod tidy && git checkout go.sum
          popd        && go mod tidy && git checkout go.sum
          git diff --exit-code

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go env
          pwd
          git status
